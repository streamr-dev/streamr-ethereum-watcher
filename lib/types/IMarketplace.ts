/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IMarketplaceInterface extends utils.Interface {
  contractName: "IMarketplace";
  functions: {
    "buy(bytes32,uint256)": FunctionFragment;
    "createProduct(bytes32,string,address,uint256,uint8,uint256)": FunctionFragment;
    "getPriceInData(uint256,uint256,uint8)": FunctionFragment;
    "getSubscription(bytes32,address)": FunctionFragment;
    "hasValidSubscription(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buy",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProduct",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceInData",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasValidSubscription",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceInData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasValidSubscription",
    data: BytesLike
  ): Result;

  events: {
    "NewSubscription(bytes32,address,uint256)": EventFragment;
    "ProductCreated(address,bytes32,string,address,uint256,uint8,uint256)": EventFragment;
    "ProductDeleted(address,bytes32,string,address,uint256,uint8,uint256)": EventFragment;
    "ProductImported(address,bytes32,string,address,uint256,uint8,uint256)": EventFragment;
    "ProductOwnershipChanged(address,bytes32,address)": EventFragment;
    "ProductOwnershipOffered(address,bytes32,address)": EventFragment;
    "ProductRedeployed(address,bytes32,string,address,uint256,uint8,uint256)": EventFragment;
    "ProductUpdated(address,bytes32,string,address,uint256,uint8,uint256)": EventFragment;
    "Subscribed(bytes32,address,uint256)": EventFragment;
    "SubscriptionExtended(bytes32,address,uint256)": EventFragment;
    "SubscriptionImported(bytes32,address,uint256)": EventFragment;
    "SubscriptionTransferred(bytes32,address,address,uint256)": EventFragment;
    "TxFeeChanged(uint256)": EventFragment;
    "WhitelistApproved(bytes32,address)": EventFragment;
    "WhitelistDisabled(bytes32)": EventFragment;
    "WhitelistEnabled(bytes32)": EventFragment;
    "WhitelistRejected(bytes32,address)": EventFragment;
    "WhitelistRequested(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductImported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductOwnershipChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductOwnershipOffered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductRedeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionImported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistRequested"): EventFragment;
}

export type NewSubscriptionEvent = TypedEvent<
  [string, string, BigNumber],
  { productId: string; subscriber: string; endTimestamp: BigNumber }
>;

export type NewSubscriptionEventFilter = TypedEventFilter<NewSubscriptionEvent>;

export type ProductCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, number, BigNumber],
  {
    owner: string;
    id: string;
    name: string;
    beneficiary: string;
    pricePerSecond: BigNumber;
    currency: number;
    minimumSubscriptionSeconds: BigNumber;
  }
>;

export type ProductCreatedEventFilter = TypedEventFilter<ProductCreatedEvent>;

export type ProductDeletedEvent = TypedEvent<
  [string, string, string, string, BigNumber, number, BigNumber],
  {
    owner: string;
    id: string;
    name: string;
    beneficiary: string;
    pricePerSecond: BigNumber;
    currency: number;
    minimumSubscriptionSeconds: BigNumber;
  }
>;

export type ProductDeletedEventFilter = TypedEventFilter<ProductDeletedEvent>;

export type ProductImportedEvent = TypedEvent<
  [string, string, string, string, BigNumber, number, BigNumber],
  {
    owner: string;
    id: string;
    name: string;
    beneficiary: string;
    pricePerSecond: BigNumber;
    currency: number;
    minimumSubscriptionSeconds: BigNumber;
  }
>;

export type ProductImportedEventFilter = TypedEventFilter<ProductImportedEvent>;

export type ProductOwnershipChangedEvent = TypedEvent<
  [string, string, string],
  { newOwner: string; id: string; oldOwner: string }
>;

export type ProductOwnershipChangedEventFilter =
  TypedEventFilter<ProductOwnershipChangedEvent>;

export type ProductOwnershipOfferedEvent = TypedEvent<
  [string, string, string],
  { owner: string; id: string; to: string }
>;

export type ProductOwnershipOfferedEventFilter =
  TypedEventFilter<ProductOwnershipOfferedEvent>;

export type ProductRedeployedEvent = TypedEvent<
  [string, string, string, string, BigNumber, number, BigNumber],
  {
    owner: string;
    id: string;
    name: string;
    beneficiary: string;
    pricePerSecond: BigNumber;
    currency: number;
    minimumSubscriptionSeconds: BigNumber;
  }
>;

export type ProductRedeployedEventFilter =
  TypedEventFilter<ProductRedeployedEvent>;

export type ProductUpdatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, number, BigNumber],
  {
    owner: string;
    id: string;
    name: string;
    beneficiary: string;
    pricePerSecond: BigNumber;
    currency: number;
    minimumSubscriptionSeconds: BigNumber;
  }
>;

export type ProductUpdatedEventFilter = TypedEventFilter<ProductUpdatedEvent>;

export type SubscribedEvent = TypedEvent<
  [string, string, BigNumber],
  { productId: string; subscriber: string; endTimestamp: BigNumber }
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export type SubscriptionExtendedEvent = TypedEvent<
  [string, string, BigNumber],
  { productId: string; subscriber: string; endTimestamp: BigNumber }
>;

export type SubscriptionExtendedEventFilter =
  TypedEventFilter<SubscriptionExtendedEvent>;

export type SubscriptionImportedEvent = TypedEvent<
  [string, string, BigNumber],
  { productId: string; subscriber: string; endTimestamp: BigNumber }
>;

export type SubscriptionImportedEventFilter =
  TypedEventFilter<SubscriptionImportedEvent>;

export type SubscriptionTransferredEvent = TypedEvent<
  [string, string, string, BigNumber],
  { productId: string; from: string; to: string; secondsTransferred: BigNumber }
>;

export type SubscriptionTransferredEventFilter =
  TypedEventFilter<SubscriptionTransferredEvent>;

export type TxFeeChangedEvent = TypedEvent<
  [BigNumber],
  { newTxFee: BigNumber }
>;

export type TxFeeChangedEventFilter = TypedEventFilter<TxFeeChangedEvent>;

export type WhitelistApprovedEvent = TypedEvent<
  [string, string],
  { productId: string; subscriber: string }
>;

export type WhitelistApprovedEventFilter =
  TypedEventFilter<WhitelistApprovedEvent>;

export type WhitelistDisabledEvent = TypedEvent<
  [string],
  { productId: string }
>;

export type WhitelistDisabledEventFilter =
  TypedEventFilter<WhitelistDisabledEvent>;

export type WhitelistEnabledEvent = TypedEvent<[string], { productId: string }>;

export type WhitelistEnabledEventFilter =
  TypedEventFilter<WhitelistEnabledEvent>;

export type WhitelistRejectedEvent = TypedEvent<
  [string, string],
  { productId: string; subscriber: string }
>;

export type WhitelistRejectedEventFilter =
  TypedEventFilter<WhitelistRejectedEvent>;

export type WhitelistRequestedEvent = TypedEvent<
  [string, string],
  { productId: string; subscriber: string }
>;

export type WhitelistRequestedEventFilter =
  TypedEventFilter<WhitelistRequestedEvent>;

export interface IMarketplace extends BaseContract {
  contractName: "IMarketplace";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      productId: BytesLike,
      subscriptionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProduct(
      id: BytesLike,
      name: string,
      beneficiary: string,
      pricePerSecond: BigNumberish,
      currency: BigNumberish,
      minimumSubscriptionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPriceInData(
      subscriptionSeconds: BigNumberish,
      price: BigNumberish,
      unit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { datacoinAmount: BigNumber }>;

    getSubscription(
      productId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isValid: boolean; endTimestamp: BigNumber }
    >;

    hasValidSubscription(
      productId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;
  };

  buy(
    productId: BytesLike,
    subscriptionSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProduct(
    id: BytesLike,
    name: string,
    beneficiary: string,
    pricePerSecond: BigNumberish,
    currency: BigNumberish,
    minimumSubscriptionSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPriceInData(
    subscriptionSeconds: BigNumberish,
    price: BigNumberish,
    unit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscription(
    productId: BytesLike,
    subscriber: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isValid: boolean; endTimestamp: BigNumber }
  >;

  hasValidSubscription(
    productId: BytesLike,
    subscriber: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    buy(
      productId: BytesLike,
      subscriptionSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createProduct(
      id: BytesLike,
      name: string,
      beneficiary: string,
      pricePerSecond: BigNumberish,
      currency: BigNumberish,
      minimumSubscriptionSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPriceInData(
      subscriptionSeconds: BigNumberish,
      price: BigNumberish,
      unit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      productId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isValid: boolean; endTimestamp: BigNumber }
    >;

    hasValidSubscription(
      productId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewSubscription(bytes32,address,uint256)"(
      productId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): NewSubscriptionEventFilter;
    NewSubscription(
      productId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): NewSubscriptionEventFilter;

    "ProductCreated(address,bytes32,string,address,uint256,uint8,uint256)"(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductCreatedEventFilter;
    ProductCreated(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductCreatedEventFilter;

    "ProductDeleted(address,bytes32,string,address,uint256,uint8,uint256)"(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductDeletedEventFilter;
    ProductDeleted(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductDeletedEventFilter;

    "ProductImported(address,bytes32,string,address,uint256,uint8,uint256)"(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductImportedEventFilter;
    ProductImported(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductImportedEventFilter;

    "ProductOwnershipChanged(address,bytes32,address)"(
      newOwner?: string | null,
      id?: BytesLike | null,
      oldOwner?: string | null
    ): ProductOwnershipChangedEventFilter;
    ProductOwnershipChanged(
      newOwner?: string | null,
      id?: BytesLike | null,
      oldOwner?: string | null
    ): ProductOwnershipChangedEventFilter;

    "ProductOwnershipOffered(address,bytes32,address)"(
      owner?: string | null,
      id?: BytesLike | null,
      to?: string | null
    ): ProductOwnershipOfferedEventFilter;
    ProductOwnershipOffered(
      owner?: string | null,
      id?: BytesLike | null,
      to?: string | null
    ): ProductOwnershipOfferedEventFilter;

    "ProductRedeployed(address,bytes32,string,address,uint256,uint8,uint256)"(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductRedeployedEventFilter;
    ProductRedeployed(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductRedeployedEventFilter;

    "ProductUpdated(address,bytes32,string,address,uint256,uint8,uint256)"(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductUpdatedEventFilter;
    ProductUpdated(
      owner?: string | null,
      id?: BytesLike | null,
      name?: null,
      beneficiary?: null,
      pricePerSecond?: null,
      currency?: null,
      minimumSubscriptionSeconds?: null
    ): ProductUpdatedEventFilter;

    "Subscribed(bytes32,address,uint256)"(
      productId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscribedEventFilter;
    Subscribed(
      productId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscribedEventFilter;

    "SubscriptionExtended(bytes32,address,uint256)"(
      productId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscriptionExtendedEventFilter;
    SubscriptionExtended(
      productId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscriptionExtendedEventFilter;

    "SubscriptionImported(bytes32,address,uint256)"(
      productId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscriptionImportedEventFilter;
    SubscriptionImported(
      productId?: BytesLike | null,
      subscriber?: string | null,
      endTimestamp?: null
    ): SubscriptionImportedEventFilter;

    "SubscriptionTransferred(bytes32,address,address,uint256)"(
      productId?: BytesLike | null,
      from?: string | null,
      to?: string | null,
      secondsTransferred?: null
    ): SubscriptionTransferredEventFilter;
    SubscriptionTransferred(
      productId?: BytesLike | null,
      from?: string | null,
      to?: string | null,
      secondsTransferred?: null
    ): SubscriptionTransferredEventFilter;

    "TxFeeChanged(uint256)"(
      newTxFee?: BigNumberish | null
    ): TxFeeChangedEventFilter;
    TxFeeChanged(newTxFee?: BigNumberish | null): TxFeeChangedEventFilter;

    "WhitelistApproved(bytes32,address)"(
      productId?: BytesLike | null,
      subscriber?: string | null
    ): WhitelistApprovedEventFilter;
    WhitelistApproved(
      productId?: BytesLike | null,
      subscriber?: string | null
    ): WhitelistApprovedEventFilter;

    "WhitelistDisabled(bytes32)"(
      productId?: BytesLike | null
    ): WhitelistDisabledEventFilter;
    WhitelistDisabled(
      productId?: BytesLike | null
    ): WhitelistDisabledEventFilter;

    "WhitelistEnabled(bytes32)"(
      productId?: BytesLike | null
    ): WhitelistEnabledEventFilter;
    WhitelistEnabled(productId?: BytesLike | null): WhitelistEnabledEventFilter;

    "WhitelistRejected(bytes32,address)"(
      productId?: BytesLike | null,
      subscriber?: string | null
    ): WhitelistRejectedEventFilter;
    WhitelistRejected(
      productId?: BytesLike | null,
      subscriber?: string | null
    ): WhitelistRejectedEventFilter;

    "WhitelistRequested(bytes32,address)"(
      productId?: BytesLike | null,
      subscriber?: string | null
    ): WhitelistRequestedEventFilter;
    WhitelistRequested(
      productId?: BytesLike | null,
      subscriber?: string | null
    ): WhitelistRequestedEventFilter;
  };

  estimateGas: {
    buy(
      productId: BytesLike,
      subscriptionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProduct(
      id: BytesLike,
      name: string,
      beneficiary: string,
      pricePerSecond: BigNumberish,
      currency: BigNumberish,
      minimumSubscriptionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPriceInData(
      subscriptionSeconds: BigNumberish,
      price: BigNumberish,
      unit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      productId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasValidSubscription(
      productId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      productId: BytesLike,
      subscriptionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProduct(
      id: BytesLike,
      name: string,
      beneficiary: string,
      pricePerSecond: BigNumberish,
      currency: BigNumberish,
      minimumSubscriptionSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPriceInData(
      subscriptionSeconds: BigNumberish,
      price: BigNumberish,
      unit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      productId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasValidSubscription(
      productId: BytesLike,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
